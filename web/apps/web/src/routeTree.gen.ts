/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthorizedImport } from './routes/_authorized'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthorizedIndexImport } from './routes/_authorized/index'
import { Route as AuthorizedProfileImport } from './routes/_authorized/profile'
import { Route as AuthVerificationImport } from './routes/_auth/verification'
import { Route as AuthRegistrationImport } from './routes/_auth/registration'
import { Route as AuthRecoveryImport } from './routes/_auth/recovery'
import { Route as AuthorizedProfileIndexImport } from './routes/_authorized/profile/index'
import { Route as AuthLoginIndexImport } from './routes/_auth/login/index'
import { Route as AuthorizedProfileSocialsImport } from './routes/_authorized/profile/socials'
import { Route as AuthorizedProfilePasswordImport } from './routes/_authorized/profile/password'
import { Route as AuthorizedProfileLanguageImport } from './routes/_authorized/profile/language'
import { Route as AuthLoginExpiredImport } from './routes/_auth/login/expired'

// Create/Update Routes

const AuthorizedRoute = AuthorizedImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedIndexRoute = AuthorizedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedProfileRoute = AuthorizedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthVerificationRoute = AuthVerificationImport.update({
  id: '/verification',
  path: '/verification',
  getParentRoute: () => AuthRoute,
} as any)

const AuthRegistrationRoute = AuthRegistrationImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => AuthRoute,
} as any)

const AuthRecoveryRoute = AuthRecoveryImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => AuthRoute,
} as any)

const AuthorizedProfileIndexRoute = AuthorizedProfileIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthorizedProfileRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthorizedProfileSocialsRoute = AuthorizedProfileSocialsImport.update({
  id: '/socials',
  path: '/socials',
  getParentRoute: () => AuthorizedProfileRoute,
} as any)

const AuthorizedProfilePasswordRoute = AuthorizedProfilePasswordImport.update({
  id: '/password',
  path: '/password',
  getParentRoute: () => AuthorizedProfileRoute,
} as any)

const AuthorizedProfileLanguageRoute = AuthorizedProfileLanguageImport.update({
  id: '/language',
  path: '/language',
  getParentRoute: () => AuthorizedProfileRoute,
} as any)

const AuthLoginExpiredRoute = AuthLoginExpiredImport.update({
  id: '/login/expired',
  path: '/login/expired',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/_auth/recovery': {
      id: '/_auth/recovery'
      path: '/recovery'
      fullPath: '/recovery'
      preLoaderRoute: typeof AuthRecoveryImport
      parentRoute: typeof AuthImport
    }
    '/_auth/registration': {
      id: '/_auth/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof AuthRegistrationImport
      parentRoute: typeof AuthImport
    }
    '/_auth/verification': {
      id: '/_auth/verification'
      path: '/verification'
      fullPath: '/verification'
      preLoaderRoute: typeof AuthVerificationImport
      parentRoute: typeof AuthImport
    }
    '/_authorized/profile': {
      id: '/_authorized/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthorizedProfileImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/': {
      id: '/_authorized/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthorizedIndexImport
      parentRoute: typeof AuthorizedImport
    }
    '/_auth/login/expired': {
      id: '/_auth/login/expired'
      path: '/login/expired'
      fullPath: '/login/expired'
      preLoaderRoute: typeof AuthLoginExpiredImport
      parentRoute: typeof AuthImport
    }
    '/_authorized/profile/language': {
      id: '/_authorized/profile/language'
      path: '/language'
      fullPath: '/profile/language'
      preLoaderRoute: typeof AuthorizedProfileLanguageImport
      parentRoute: typeof AuthorizedProfileImport
    }
    '/_authorized/profile/password': {
      id: '/_authorized/profile/password'
      path: '/password'
      fullPath: '/profile/password'
      preLoaderRoute: typeof AuthorizedProfilePasswordImport
      parentRoute: typeof AuthorizedProfileImport
    }
    '/_authorized/profile/socials': {
      id: '/_authorized/profile/socials'
      path: '/socials'
      fullPath: '/profile/socials'
      preLoaderRoute: typeof AuthorizedProfileSocialsImport
      parentRoute: typeof AuthorizedProfileImport
    }
    '/_auth/login/': {
      id: '/_auth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof AuthImport
    }
    '/_authorized/profile/': {
      id: '/_authorized/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof AuthorizedProfileIndexImport
      parentRoute: typeof AuthorizedProfileImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthRecoveryRoute: typeof AuthRecoveryRoute
  AuthRegistrationRoute: typeof AuthRegistrationRoute
  AuthVerificationRoute: typeof AuthVerificationRoute
  AuthLoginExpiredRoute: typeof AuthLoginExpiredRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthRecoveryRoute: AuthRecoveryRoute,
  AuthRegistrationRoute: AuthRegistrationRoute,
  AuthVerificationRoute: AuthVerificationRoute,
  AuthLoginExpiredRoute: AuthLoginExpiredRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthorizedProfileRouteChildren {
  AuthorizedProfileLanguageRoute: typeof AuthorizedProfileLanguageRoute
  AuthorizedProfilePasswordRoute: typeof AuthorizedProfilePasswordRoute
  AuthorizedProfileSocialsRoute: typeof AuthorizedProfileSocialsRoute
  AuthorizedProfileIndexRoute: typeof AuthorizedProfileIndexRoute
}

const AuthorizedProfileRouteChildren: AuthorizedProfileRouteChildren = {
  AuthorizedProfileLanguageRoute: AuthorizedProfileLanguageRoute,
  AuthorizedProfilePasswordRoute: AuthorizedProfilePasswordRoute,
  AuthorizedProfileSocialsRoute: AuthorizedProfileSocialsRoute,
  AuthorizedProfileIndexRoute: AuthorizedProfileIndexRoute,
}

const AuthorizedProfileRouteWithChildren =
  AuthorizedProfileRoute._addFileChildren(AuthorizedProfileRouteChildren)

interface AuthorizedRouteChildren {
  AuthorizedProfileRoute: typeof AuthorizedProfileRouteWithChildren
  AuthorizedIndexRoute: typeof AuthorizedIndexRoute
}

const AuthorizedRouteChildren: AuthorizedRouteChildren = {
  AuthorizedProfileRoute: AuthorizedProfileRouteWithChildren,
  AuthorizedIndexRoute: AuthorizedIndexRoute,
}

const AuthorizedRouteWithChildren = AuthorizedRoute._addFileChildren(
  AuthorizedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthorizedRouteWithChildren
  '/recovery': typeof AuthRecoveryRoute
  '/registration': typeof AuthRegistrationRoute
  '/verification': typeof AuthVerificationRoute
  '/profile': typeof AuthorizedProfileRouteWithChildren
  '/': typeof AuthorizedIndexRoute
  '/login/expired': typeof AuthLoginExpiredRoute
  '/profile/language': typeof AuthorizedProfileLanguageRoute
  '/profile/password': typeof AuthorizedProfilePasswordRoute
  '/profile/socials': typeof AuthorizedProfileSocialsRoute
  '/login': typeof AuthLoginIndexRoute
  '/profile/': typeof AuthorizedProfileIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/recovery': typeof AuthRecoveryRoute
  '/registration': typeof AuthRegistrationRoute
  '/verification': typeof AuthVerificationRoute
  '/': typeof AuthorizedIndexRoute
  '/login/expired': typeof AuthLoginExpiredRoute
  '/profile/language': typeof AuthorizedProfileLanguageRoute
  '/profile/password': typeof AuthorizedProfilePasswordRoute
  '/profile/socials': typeof AuthorizedProfileSocialsRoute
  '/login': typeof AuthLoginIndexRoute
  '/profile': typeof AuthorizedProfileIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_authorized': typeof AuthorizedRouteWithChildren
  '/_auth/recovery': typeof AuthRecoveryRoute
  '/_auth/registration': typeof AuthRegistrationRoute
  '/_auth/verification': typeof AuthVerificationRoute
  '/_authorized/profile': typeof AuthorizedProfileRouteWithChildren
  '/_authorized/': typeof AuthorizedIndexRoute
  '/_auth/login/expired': typeof AuthLoginExpiredRoute
  '/_authorized/profile/language': typeof AuthorizedProfileLanguageRoute
  '/_authorized/profile/password': typeof AuthorizedProfilePasswordRoute
  '/_authorized/profile/socials': typeof AuthorizedProfileSocialsRoute
  '/_auth/login/': typeof AuthLoginIndexRoute
  '/_authorized/profile/': typeof AuthorizedProfileIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/recovery'
    | '/registration'
    | '/verification'
    | '/profile'
    | '/'
    | '/login/expired'
    | '/profile/language'
    | '/profile/password'
    | '/profile/socials'
    | '/login'
    | '/profile/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/recovery'
    | '/registration'
    | '/verification'
    | '/'
    | '/login/expired'
    | '/profile/language'
    | '/profile/password'
    | '/profile/socials'
    | '/login'
    | '/profile'
  id:
    | '__root__'
    | '/_auth'
    | '/_authorized'
    | '/_auth/recovery'
    | '/_auth/registration'
    | '/_auth/verification'
    | '/_authorized/profile'
    | '/_authorized/'
    | '/_auth/login/expired'
    | '/_authorized/profile/language'
    | '/_authorized/profile/password'
    | '/_authorized/profile/socials'
    | '/_auth/login/'
    | '/_authorized/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthorizedRoute: typeof AuthorizedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthorizedRoute: AuthorizedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_authorized"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/recovery",
        "/_auth/registration",
        "/_auth/verification",
        "/_auth/login/expired",
        "/_auth/login/"
      ]
    },
    "/_authorized": {
      "filePath": "_authorized.tsx",
      "children": [
        "/_authorized/profile",
        "/_authorized/"
      ]
    },
    "/_auth/recovery": {
      "filePath": "_auth/recovery.tsx",
      "parent": "/_auth"
    },
    "/_auth/registration": {
      "filePath": "_auth/registration.tsx",
      "parent": "/_auth"
    },
    "/_auth/verification": {
      "filePath": "_auth/verification.tsx",
      "parent": "/_auth"
    },
    "/_authorized/profile": {
      "filePath": "_authorized/profile.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/profile/language",
        "/_authorized/profile/password",
        "/_authorized/profile/socials",
        "/_authorized/profile/"
      ]
    },
    "/_authorized/": {
      "filePath": "_authorized/index.tsx",
      "parent": "/_authorized"
    },
    "/_auth/login/expired": {
      "filePath": "_auth/login/expired.tsx",
      "parent": "/_auth"
    },
    "/_authorized/profile/language": {
      "filePath": "_authorized/profile/language.tsx",
      "parent": "/_authorized/profile"
    },
    "/_authorized/profile/password": {
      "filePath": "_authorized/profile/password.tsx",
      "parent": "/_authorized/profile"
    },
    "/_authorized/profile/socials": {
      "filePath": "_authorized/profile/socials.tsx",
      "parent": "/_authorized/profile"
    },
    "/_auth/login/": {
      "filePath": "_auth/login/index.tsx",
      "parent": "/_auth"
    },
    "/_authorized/profile/": {
      "filePath": "_authorized/profile/index.tsx",
      "parent": "/_authorized/profile"
    }
  }
}
ROUTE_MANIFEST_END */
