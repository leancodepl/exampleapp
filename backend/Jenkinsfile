def isHotfix = BRANCH_NAME ==~ 'backend-hotfix/.*'
def isMaster = BRANCH_NAME == 'master'
def isReleaseBuild = isMaster || isHotfix
def dbPassword = 'Passw12#'

leancode.builder('exampleapp-backend')
    .withMonorepoTest(['backend'])
    .withBuildKit()
    .withDotnet([version: '8.0', image: 'mcr.microsoft.com/dotnet/sdk'])
    .withDefaultContainer(
        name: 'postgres',
        image: 'postgres',
        version: '15',
        defCpuReq: '2',
        defCpuLim: '4',
        defMemReq: '12Gi',
        defMemLim: '16Gi',
        args: [:])
    .withDefaultContainer(
        name: 'storage',
        image: 'mcr.microsoft.com/azure-storage/azurite',
        version: '3.16.0',
        defCpuReq: '500m',
        defCpuLim: '1',
        defMemReq: '500Mi',
        defMemLim: '1Gi',
        args: [:])
    .withEnv(envVar(key: 'POSTGRES_PASSWORD', value: dbPassword))
    .withVolume(emptyDirVolume(mountPath: '/var/lib/postgresql/data', memory: true))
    .runOnSpot()
    .run {

    def scmVars

    stage('Checkout') {
        scmVars = safeCheckout scm
    }

    leancode.configureRepositories()

    stage('Version') {
        env.GIT_COMMIT = scmVars.GIT_COMMIT

        if (isHotfix) {
            gitUtils.fetch("master")
            def mergeBase = sh(script: 'git merge-base HEAD origin/master', returnStdout: true).trim()
            def baseTag = sh(script: "git describe --tags --exact-match --match='backend-v*' ${mergeBase}", returnStdout: true).trim()
            def baseVersion = baseTag.minus('backend-v')
            if (!baseVersion) {
                error 'Cannot decode base version'
            }

            def hotfixName = isHotfix ? (BRANCH_NAME =~ 'backend-hotfix/(.*)')[0][1] : ''
            def hotfixVersion = nextBuildNumber(hotfixName.replace('/', '_').replace('-', '_'))
            env.APP_VERSION = "${baseVersion}-${hotfixName}-${hotfixVersion}"
            currentBuild.displayName = "v${env.APP_VERSION}"
        } else if (isMaster) {
            env.APP_VERSION = "0.0.${nextBuildNumber()}"
            currentBuild.displayName = "v${env.APP_VERSION}"
        } else {
            env.APP_VERSION = "0.0.0"
        }

        echo "Building version: ${env.APP_VERSION}"
    }

    dir('backend') {
        container('dotnet') {
            stage('Restore') {
                sh '''
                    dotnet restore
                    dotnet tool restore
                '''
            }

            stage('Check Formatting') {
                sh 'dotnet tool run dotnet-csharpier . --check'
            }

            stage('Build') {
                sh 'dotnet build -c Release --no-restore'
            }

            stage('Test') {
                try {
                    dir('tests') {
                        sh 'dotnet test -c Release -l trx'
                    }
                } finally {
                    step([$class: 'MSTestPublisher', testResultsFile: 'tests/**/TestResults/*.trx', failOnError: true, keepLongStdio: true])
                }
            }

            stage('Integration test') {
                try {
                    dir('tests/Examples/ExampleApp.Examples.IntegrationTests') {
                        env.Kratos__AdminEndpoint = 'http://localhost:4434'
                        env.Kratos__PublicEndpoint = 'http://localhost:4433'
                        env.BlobStorage__ConnectionString = 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;'
                        env.PostgreSQL__ConnectionStringBase = "Host=localhost;Username=postgres;Password=$dbPassword"
                        env.ConfigCat__FlagOverridesJsonObject = '''{
                            "showButtonLeadingOnHomePage": true
                        }'''

                        sh 'dotnet test -c Release -l trx -p:MaxParallelThreads=2'
                    }
                } finally {
                    step([$class: 'MSTestPublisher', testResultsFile: 'tests/Examples/ExampleApp.Examples.IntegrationTests/TestResults/*.trx', failOnError: true, keepLongStdio: true])
                }
            }

            stage('Publish') {
                dir('src/Examples/ExampleApp.Examples.Api') {
                    sh 'dotnet publish -c Release -o deploy --no-build'
                }
            }

            stage('Build migrations bundle') {
                dir('src/Examples/ExampleApp.Examples.Api') {
                    env.PostgreSQL__ConnectionString = "Host=localhost;Username=postgres;Password=$dbPassword"

                    sh '''
                        dotnet ef migrations bundle -o deploy/migrations -r linux-x64 --force --no-build --configuration Release
                    '''
                }
            }
        }

        stage('Push containers') {
            when (isReleaseBuild) {
                leancode.withACR {
                    sh """
                        buildctl build \
                            --frontend dockerfile.v0 \
                            --local context=. \
                            --local dockerfile=./release \
                            --opt filename=Dockerfile.api \
                            --output type=image,name="${leancode.ACR()}/exampleapp-examples-api:$APP_VERSION",push=true
                        buildctl build \
                            --frontend dockerfile.v0 \
                            --local context=. \
                            --local dockerfile=./release \
                            --opt filename=Dockerfile.migrations \
                            --output type=image,name="${leancode.ACR()}/exampleapp-examples-migrations:$APP_VERSION",push=true
                    """
                }
            }
        }
    }

    dir('backend/release') {
        stage('Deploy to test') {
            when (isMaster) {
                withCredentials([usernamePassword(credentialsId: 'github-app',
                                                  usernameVariable: 'GITHUB_APP',
                                                  passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {
                    sh '''
                        git config --global user.email "jenkins@leancode.pl"
                        git config --global user.name "Jenkins"
                        git clone "https://x-access-token:${GITHUB_ACCESS_TOKEN}@github.com/leancodepl/exampleapp-deployment.git"
                        cd exampleapp-deployment/apps/exampleapp-backend/test
                        kustomize edit set image exampleapp-examples-api="*:${APP_VERSION}" exampleapp-examples-migrations="*:${APP_VERSION}"
                        git add -A
                        git commit -m "Update ExampleApp Examples backend version to $APP_VERSION"
                        git push
                    '''
               }
            }
        }

        stage('Write artifacts') {
            relatedBuild.writeAsArtifact "$APP_VERSION", 'APP_VERSION'
            relatedBuild.writeAsArtifact "$GIT_COMMIT", 'GIT_COMMIT'
        }
    }
}
