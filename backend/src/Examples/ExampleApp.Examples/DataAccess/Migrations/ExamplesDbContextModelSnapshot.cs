// <auto-generated />
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text.Json;
using ExampleApp.Examples.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExampleApp.Examples.DataAccess.Migrations
{
    [DbContext(typeof(ExamplesDbContext))]
    partial class ExamplesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExampleApp.Examples.DataAccess.Entities.KratosIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonElement?>("MetadataAdmin")
                        .HasColumnType("jsonb");

                    b.Property<JsonElement?>("MetadataPublic")
                        .HasColumnType("jsonb");

                    b.Property<string>("SchemaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonElement>("Traits")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("KratosIdentities");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Booking.CalendarDay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateModified");

                    b.Property<string>("ServiceProviderId")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasAlternateKey("ServiceProviderId", "Date");

                    b.ToTable("CalendarDays");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Booking.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext");

                    b.Property<string>("CalendarDayId")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateModified");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeslotId")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "Status");

                    b.HasIndex("CustomerId", "TimeslotId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Booking.ServiceProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPromotionActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ListItemPicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionalBanner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Ratings")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.ComplexProperty<Dictionary<string, object>>("Location", "ExampleApp.Examples.Domain.Booking.ServiceProvider.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");
                        });

                    b.HasKey("Id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Booking.Timeslot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext");

                    b.Property<string>("CalendarDayId")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("ReservedBy")
                        .HasColumnType("citext");

                    b.Property<string>("ServiceProviderId")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "ExampleApp.Examples.Domain.Booking.Timeslot.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CalendarDayId");

                    b.HasIndex("ServiceProviderId", "CalendarDayId", "Date", "StartTime");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Employees.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateModified");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Projects.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("LeanCode.AppRating.DataAccess.AppRating<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("text");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<ImmutableDictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("Platform")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("SystemVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "DateCreated");

                    b.ToTable("AppRatings");
                });

            modelBuilder.Entity("LeanCode.Firebase.FCM.PushNotificationTokenEntity<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "Token");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("PushNotificationTokens");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("MessageId", "ConsumerId");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique();

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState");
                });

            modelBuilder.Entity("ExampleApp.Examples.DataAccess.Entities.KratosIdentity", b =>
                {
                    b.OwnsMany("ExampleApp.Examples.DataAccess.Entities.KratosIdentityRecoveryAddress", "RecoveryAddresses", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("IdentityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Via")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("IdentityId");

                            b1.ToTable("KratosIdentityRecoveryAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("IdentityId");
                        });

                    b.OwnsMany("ExampleApp.Examples.DataAccess.Entities.KratosIdentityVerifiableAddress", "VerifiableAddresses", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("IdentityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("VerifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Via")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("IdentityId");

                            b1.ToTable("KratosIdentityVerifiableAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("IdentityId");
                        });

                    b.Navigation("RecoveryAddresses");

                    b.Navigation("VerifiableAddresses");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Booking.Timeslot", b =>
                {
                    b.HasOne("ExampleApp.Examples.Domain.Booking.CalendarDay", "CalendarDay")
                        .WithMany("Timeslots")
                        .HasForeignKey("CalendarDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarDay");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Projects.Project", b =>
                {
                    b.OwnsMany("ExampleApp.Examples.Domain.Projects.Assignment", "Assignments", b1 =>
                        {
                            b1.Property<string>("ParentProjectId")
                                .HasColumnType("citext");

                            b1.Property<string>("Id")
                                .HasColumnType("citext");

                            b1.Property<string>("AssignedEmployeeId")
                                .HasColumnType("citext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("ParentProjectId", "Id");

                            b1.ToTable("Assignments", (string)null);

                            b1.WithOwner("ParentProject")
                                .HasForeignKey("ParentProjectId");

                            b1.Navigation("ParentProject");
                        });

                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ExampleApp.Examples.Domain.Booking.CalendarDay", b =>
                {
                    b.Navigation("Timeslots");
                });
#pragma warning restore 612, 618
        }
    }
}
