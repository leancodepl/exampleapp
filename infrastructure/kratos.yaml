version: v1.2.0
serve:
  public:
    base_url: https://auth.${domain}/
    cors:
      enabled: true
      allowed_origins:
        - https://${domain}
        - https://*.${domain}
%{ for origin in dev_allowed_origins ~}
        - https://${origin}
        - https://*.${origin}
%{ endfor ~}
cookies:
  domain: "${domain}"
  same_site: Lax
session:
  lifespan: 8760h # 1y
selfservice:
  default_browser_return_url: https://${domain}/
  allowed_return_urls:
    - https://${domain}/
    - pl.leancode.template.tst://app
%{ for origin in dev_allowed_origins ~}
    - https://${origin}
    - https://*.${origin}
%{ endfor ~}
  methods:
    link:
      config:
        lifespan: 1h
      enabled: true
    password:
      enabled: true
    lookup_secret:
      enabled: true
    totp:
      enabled: true
      config:
        issuer: "${authority_name}"
    passkey:
      enabled: true
      config:
        rp:
          display_name: "${authority_name}"
          id: "${domain}"
          origins:
            - "https://${domain}"
%{ for origin in passkey_origins ~}
            - "${origin}"
%{ endfor ~}
    profile:
      enabled: true
    code:
      enabled: true
%{ if oidc_config != null ~}
    oidc:
      enabled: true
      config:
        providers:
%{ if oidc_config.apple != null ~}
          - id: apple
            provider: apple
            label: Apple
            issuer_url: https://appleid.apple.com
            client_id: "${oidc_config.apple.client_id}"
            additional_id_token_audiences:
              - "${trimsuffix(oidc_config.apple.client_id, ".signin")}"
%{ if strcontains(oidc_config.apple.client_id, ".tst") ~}
              - "${replace(oidc_config.apple.client_id, ".tst", ".dev")}"
              - "${replace(trimsuffix(oidc_config.apple.client_id, ".signin"), ".tst", ".dev")}"
%{ endif ~}
            apple_team_id: "${oidc_config.apple.team_id}"
            apple_private_key_id: "${oidc_config.apple.private_key_id}"
            apple_private_key: "${replace(oidc_config.apple.private_key, "\n", "\\n")}"
            scope:
              - openid
              - email
              - name
            mapper_url: file:///etc/kratos/oidc.apple.mapper.jsonnet
%{ endif ~}
%{ if oidc_config.google != null ~}
          - id: google
            provider: google
            label: Google
            issuer_url: https://accounts.google.com
            client_id: "${oidc_config.google.client_id}"
            client_secret: "${oidc_config.google.client_secret}"
            scope:
              - openid
              - email
              - profile
            mapper_url: file:///etc/kratos/oidc.google.mapper.jsonnet
%{ endif ~}
%{ if oidc_config.facebook != null ~}
          - id: facebook
            provider: facebook
            label: Facebook
            issuer_url: https://www.facebook.com
            client_id: "${oidc_config.facebook.client_id}"
            client_secret: "${oidc_config.facebook.client_secret}"
            scope:
              - email
              - public_profile
            mapper_url: file:///etc/kratos/oidc.facebook.mapper.jsonnet
%{ endif ~}
%{ endif ~}
  flows:
    login:
      ui_url: https://${domain}/login
      lifespan: 1h
      after:
        password:
          hooks:
            - hook: require_verified_address # ensures that user has confirmed email when signing in with a password
    registration:
      ui_url: https://${domain}/registration
      lifespan: 1h
      enabled: true
      enable_legacy_one_step: true
      after:
        password:
          hooks:
            - hook: show_verification_ui
            - hook: web_hook
              config:
                url: "${api}/kratos/sync-identity"
                method: POST
                auth:
                  type: api_key
                  config:
                    in: header
                    name: X-Api-Key
                    value: "${web_hook_api_key}"
                body: file:///etc/kratos/webhook.identity.mapper.jsonnet
                response:
                  ignore: true
                  parse: false
        oidc:
          hooks:
            - hook: session
            - hook: web_hook
              config:
                url: "${api}/kratos/sync-identity"
                method: POST
                auth:
                  type: api_key
                  config:
                    in: header
                    name: X-Api-Key
                    value: "${web_hook_api_key}"
                body: file:///etc/kratos/webhook.identity.mapper.jsonnet
                response:
                  ignore: true
                  parse: false
    verification:
      ui_url: https://${domain}/verification
      enabled: true
      use: code
      after:
        hooks:
          - hook: web_hook
            config:
              url: "${api}/kratos/sync-identity"
              method: POST
              auth:
                type: api_key
                config:
                  in: header
                  name: X-Api-Key
                  value: "${web_hook_api_key}"
              body: file:///etc/kratos/webhook.identity.mapper.jsonnet
              response:
                ignore: true
                parse: false
    recovery:
      ui_url: https://${domain}/recovery
      enabled: true
      use: code
      after:
        hooks:
          - hook: web_hook
            config:
              url: "${api}/kratos/sync-identity"
              method: POST
              auth:
                type: api_key
                config:
                  in: header
                  name: X-Api-Key
                  value: "${web_hook_api_key}"
              body: file:///etc/kratos/webhook.identity.mapper.jsonnet
              response:
                ignore: true
                parse: false
    settings:
      ui_url: https://${domain}/settings
      privileged_session_max_age: 15m
      after:
        hooks:
          - hook: web_hook
            config:
              url: "${api}/kratos/sync-identity"
              method: POST
              auth:
                type: api_key
                config:
                  in: header
                  name: X-Api-Key
                  value: "${web_hook_api_key}"
              body: file:///etc/kratos/webhook.identity.mapper.jsonnet
              response:
                ignore: true
                parse: false
    error:
      ui_url: https://${domain}/error
log:
  level: info
  format: json
tracing:
  service_name: Ory Kratos
  provider: otel
  providers:
    otlp:
      insecure: true
      sampling:
        sampling_ratio: 0.4
ciphers:
  algorithm: xchacha20-poly1305
hashers:
  algorithm: bcrypt
  bcrypt:
    cost: 8
identity:
  default_schema_id: user
  schemas:
    - id: user
      url: file:///etc/kratos/identity.user.schema.json
feature_flags:
  use_continue_with_transitions: true
